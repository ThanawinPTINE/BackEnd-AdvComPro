const express = require('express');
const { Sequelize, DataTypes } = require('sequelize');
const app = express();

app.use(express.json());

const sequelize = new Sequelize({
    dialect: 'sqlite',
    storage: './Database/SQBooks.sqlite' // Corrected path to 'Database' and storage file
});

const Book = sequelize.define('book', {
    id: {
        type: DataTypes.INTEGER,
        autoIncrement: true,
        primaryKey: true
    },
    title: {
        type: DataTypes.STRING,
        allowNull: false
    },
    author: {
        type: DataTypes.STRING,
        allowNull: false
    }
});

sequelize.sync(); // Ensures the table is created

app.get('/books', async (req, res) => {
    try {
        const books = await Book.findAll();
        res.json(books);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.get('/books/:id', async (req, res) => {
    try {
        const book = await Book.findByPk(req.params.id);
        if (!book) {
            res.status(404).send('Book not found');
        } else {
            res.json(book);
        }
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.post('/books', async (req, res) => {
    try {
        const book = await Book.create(req.body);
        res.status(201).json(book);
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.put('/books/:id', async (req, res) => {
    try {
        const book = await Book.findByPk(req.params.id);
        if (!book) {
            res.status(404).send('Book not found');
        } else {
            await book.update(req.body);
            res.json(book);
        }
    } catch (err) {
        res.status(500).send(err.message);
    }
});

app.delete('/books/:id', async (req, res) => {
    try {
        const book = await Book.findByPk(req.params.id);
        if (!book) {
            res.status(404).send('Book not found');
        } else {
            await book.destroy();
            res.status(204).send(); // No content
        }
    } catch (err) {
        res.status(500).send(err.message);
    }
});

// Start the server
const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));
